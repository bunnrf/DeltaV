{"version":3,"sources":["webpack:///webpack/bootstrap ec7553aa855893ff9e86","webpack:///./lib/deltav.js","webpack:///./lib/game.js","webpack:///./lib/game_view.js","webpack:///./lib/planet.js","webpack:///./lib/util.js","webpack:///./lib/moving_object.js","webpack:///./lib/ship.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACZD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,uBAAuB;AACxC,wBAAuB,uBAAuB;AAC9C;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;AChIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAwB,qBAAqB,EAAE;AAC/C,IAAG;;AAEH,yBAAwB,aAAa,EAAE;AACvC,yBAAwB,uBAAuB,EAAE;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACzCA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sCAAqC;AACrC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACvBA;AACA;;AAEA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,aAAY;AACZ;AACA;AACA;;AAEA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA,IAAG;AACH;AACA,4BAA2B,+BAA+B;AAC1D;AACA;AACA,IAAG;AACH;;AAEA;;;;;;;ACzDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AChFA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,cAAa;AACb,uBAAsB;AACtB,6BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap ec7553aa855893ff9e86\n **/","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  ctx.scale(.5, .5);\n  const game = new Game(ctx);\n  new GameView(game, ctx).start();\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/deltav.js\n ** module id = 0\n ** module chunks = 0\n **/","const Planet = require(\"./planet\");\nconst Ship = require(\"./ship\");\nconst Util = require(\"./util\");\n\nconst Game = function() {\n  this.planets = [];\n  this.ships = [];\n\n  this.addSun();\n  this.addEarth();\n};\n\nGame.DIM_X = 5000;\nGame.DIM_Y = 3000;\nGame.FPS = 32;\nGame.BG_COLOR = \"#000000\";\n\nGame.prototype.add = function (object) {\n  if (object instanceof Planet) {\n    this.planets.push(object);\n  } else if (object instanceof Ship) {\n    this.ships.push(object);\n  } else {\n    throw \"unrecognized object\";\n  }\n};\n\nGame.prototype.addSun = function() {\n  const sun = new Planet({\n    pos: [Game.DIM_X / 2, Game.DIM_Y / 2],\n    vel: [0, 0],\n    mass: 10000,\n    radius: 250,\n    fixed: true,\n    color: \"yellow\",\n    game: this\n  });\n\n  this.add(sun);\n\n  return sun;\n};\n\nGame.prototype.addEarth = function() {\n  const earth = new Planet({\n    pos: [Game.DIM_X / 2 + 1000, Game.DIM_Y / 2],\n    vel: [0, 1.4],\n    mass: 500,\n    radius: 50,\n    color: \"blue\",\n    game: this\n  });\n\n  this.add(earth);\n\n  return earth;\n};\n\nGame.prototype.addShip = function () {\n  const ship = new Ship({\n    pos: [Game.DIM_X / 2 + 1000, Game.DIM_Y / 2 + 200],\n    vel: [.7, 1.4],\n    mass: 1,\n    heading: Math.PI,\n    color: \"green\",\n    game: this\n  });\n\n  this.add(ship);\n\n  return ship;\n};\n\nGame.prototype.allObjects = function () {\n  return [].concat(this.planets, this.ships);\n};\n\nGame.prototype.physicsStep = function () {\n  const allObjects = this.allObjects();\n  for (let i = 0; i < allObjects.length; i++) {\n    for (let j = i + 1; j < allObjects.length; j++) {\n      const obj1 = allObjects[i];\n      const obj2 = allObjects[j];\n\n      const force = Util.grav(obj1, obj2);\n\n      obj1.applyForce(force.map(dir => -dir));\n      obj2.applyForce(force);\n\n      if (obj1.isCollidedWith(obj2)) {\n        const collision = obj1.collideWith(obj2);\n        if (collision) return;\n      }\n    }\n  }\n};\n\nGame.prototype.draw = function (ctx) {\n  ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n  ctx.fillStyle = Game.BG_COLOR;\n  ctx.fillRect(0, 0, Game.DIM_X, Game.DIM_Y);\n\n  this.allObjects().forEach((object) => {\n    object.draw(ctx);\n  });\n};\n\nGame.prototype.moveObjects = function (delta) {\n  this.allObjects().forEach((object) => {\n    object.move(delta);\n  });\n};\n\nGame.prototype.remove = function (object) {\n  if (object instanceof Planet) {\n    this.planets.splice(this.planets.indexOf(object), 1);\n  } else if (object instanceof Ship) {\n    this.ships.splice(this.ships.indexOf(object), 1);\n  } else {\n    throw \"unrecognized object\";\n  }\n};\n\nGame.prototype.step = function (delta) {\n  this.moveObjects(delta);\n  this.physicsStep();\n};\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 1\n ** module chunks = 0\n **/","const GameView = function (game, ctx) {\n  this.ctx = ctx;\n  this.game = game;\n  this.ship = this.game.addShip();\n};\n\nGameView.ROTATIONS = {\n  \"a\": -0.005,\n  \"d\": 0.005\n};\n\nGameView.prototype.bindKeyHandlers = function () {\n  const ship = this.ship;\n\n  Object.keys(GameView.ROTATIONS).forEach((k) => {\n    let move = GameView.ROTATIONS[k];\n    key(k, function () { ship.accelRot(move); } );\n  });\n\n  key(\"w\", function () { ship.burn(); } );\n  key(\"r\", function () { ship.toggleReaction(); } );\n};\n\nGameView.prototype.start = function () {\n  this.bindKeyHandlers();\n  this.lastTime = 0;\n  //start the animation\n  requestAnimationFrame(this.animate.bind(this));\n};\n\nGameView.prototype.animate = function(time){\n  const timeDelta = time - this.lastTime;\n\n  this.game.step(timeDelta);\n  this.game.draw(this.ctx);\n  this.lastTime = time;\n\n  //every call to animate requests causes another call to animate\n  requestAnimationFrame(this.animate.bind(this));\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game_view.js\n ** module id = 2\n ** module chunks = 0\n **/","const Util = require(\"./util\");\nconst MovingObject = require(\"./moving_object\");\nconst Ship = require(\"./ship\");\n\nconst DEFAULTS = {\n\tCOLOR: \"#505050\",\n};\n\nconst Planet = function (options = {}) {\n  options.color = options.color || DEFAULTS.COLOR;\n\n  MovingObject.call(this, options);\n};\n\nUtil.inherits(Planet, MovingObject);\n\nPlanet.prototype.collideWith = function (otherObject) {\n  if (otherObject instanceof Ship) {\n    otherObject.relocate();\n\t\treturn true;\n\t}\n};\n\nmodule.exports = Planet;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/planet.js\n ** module id = 3\n ** module chunks = 0\n **/","const Util = {\n  BIG_G: .51,\n\n  angle (pos1, pos2) {\n    return Math.atan2(pos1[1] - pos2[1], pos1[0] - pos2[0]);\n  },\n  // Normalize the length of the vector to 1, maintaining direction.\n  dir (vec) {\n    const norm = Util.norm(vec);\n    return Util.scale(vec, 1 / norm);\n  },\n  // Find distance between two points.\n  dist (pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n  // Find acceleration due to gravity between two objects.\n  // obj = { pos: pos, mass: mass }\n  grav (obj1, obj2) {\n    const magnitude = Util.magnitude(obj1, obj2);\n    const angle = Util.angle(obj1.pos, obj2.pos);\n\n    return Util.scalar(magnitude, angle);\n  },\n\n  magnitude (obj1, obj2) {\n    const dist = Util.dist(obj1.pos, obj2.pos);\n    return Util.BIG_G * obj1.mass * obj2.mass / (Math.pow(dist, 2));\n  },\n  // Find the length of the vector.\n  norm (vec) {\n    return Util.dist([0, 0], vec);\n  },\n  // Return a randomly oriented vector with the given length.\n  randomVec (length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n\n  scalar (magnitude, angle) {\n    const force_x = magnitude * Math.cos(angle);\n    const force_y = magnitude * Math.sin(angle);\n\n    return [force_x, force_y];\n  },\n  // Scale the length of a vector by the given amount.\n  scale (vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n  inherits (ChildClass, BaseClass) {\n    function Surrogate () { this.constructor = ChildClass; }\n    Surrogate.prototype = BaseClass.prototype;\n    ChildClass.prototype = new Surrogate();\n  },\n};\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util.js\n ** module id = 4\n ** module chunks = 0\n **/","const Util = require(\"./util\");\n\nconst MovingObject = function (options) {\n  this.pos       = options.pos;\n  this.vel       = options.vel;\n  this.rotVel    = options.rotVel || 0;\n  this.rotation  = options.rotation;\n  this.mass      = options.mass;\n  this.thrust    = options.thrust || 0;\n  this.torque    = options.torque || 1;\n  this.radius    = options.radius;\n  this.fixed     = options.fixed || false;\n  this.color     = options.color;\n  this.image     = options.image || undefined;\n  this.game      = options.game;\n};\n\nMovingObject.prototype.accelerate = function (impulse) {\n  this.vel[0] += impulse[0];\n  this.vel[1] += impulse[1];\n};\n\nMovingObject.prototype.applyForce = function (force) {\n  if (this.fixed) {\n    return;\n  }\n  this.accelerate([force[0] / this.mass, force[1] / this.mass]);\n};\n\nMovingObject.prototype.collideWith = function (otherObject) {\n  // default do nothing\n};\n\nMovingObject.prototype.draw = function (ctx) {\n  if (this.image) {\n    ctx.drawImage(this.image, this.pos[0] - this.radius, this.pos[1] - this.radius, this.radius * 2, this.radius * 2);\n  } else {\n    ctx.fillStyle = this.color;\n\n    ctx.beginPath();\n    ctx.arc(\n      this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true\n    );\n    ctx.fill();\n  }\n};\n\nMovingObject.prototype.isCollidedWith = function (otherObject) {\n  const centerDist = Util.dist(this.pos, otherObject.pos);\n  return centerDist < (this.radius + otherObject.radius);\n};\n\nconst NORMAL_FRAME_TIME_DELTA = 1000/60;\nMovingObject.prototype.move = function (timeDelta) {\n  //timeDelta is number of milliseconds since last move\n  //if the computer is busy the time delta will be larger\n  //in this case the MovingObject should move farther in this frame\n  //velocity of object is how far it should move in 1/60th of a second\n  const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n      offsetX = this.vel[0] * velocityScale,\n      offsetY = this.vel[1] * velocityScale;\n\n  this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n  this.rotation = this.rotation + this.rotVel;\n\n  //dampen angular velocity\n  //does not consider mass\n  if (this.reactionControl) {\n    this.accelRot(-this.rotVel / this.torque);\n  }\n};\n\nMovingObject.prototype.remove = function () {\n  this.game.remove(this);\n};\n\nMovingObject.prototype.accelRot = function (rotAcc) {\n  this.rotVel += rotAcc;\n};\n\nmodule.exports = MovingObject;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/moving_object.js\n ** module id = 5\n ** module chunks = 0\n **/","var Util = require(\"./util\");\nvar MovingObject = require(\"./moving_object\");\n\nfunction randomColor() {\n  var hexDigits = \"0123456789ABCDEF\";\n\n  var color = \"#\";\n  for (var i = 0; i < 3; i ++) {\n    color += hexDigits[Math.floor((Math.random() * 16))];\n  }\n\n  return color;\n}\n\nvar Ship = function (options) {\n  options.vel = options.vel || [0, 0];\n  options.mass = options.mass || 1;\n  options.radius = options.radius || Ship.RADIUS;\n  options.rotation = options.rotation || 0;\n  options.thrust = options.thrust || .01;\n  options.torque = options.torque || 100;\n  options.color = options.color || randomColor();\n\n  MovingObject.call(this, options);\n};\n\nShip.RADIUS = 5;\n\nUtil.inherits(Ship, MovingObject);\n\nShip.prototype.relocate = function () {\n  this.pos = this.game.randomPosition();\n  this.vel = [0, 0];\n};\n\n// overwrites MovingObject.draw\nShip.prototype.draw = function (ctx) {\n  ctx.fillStyle = this.color;\n\n  const x = this.pos[0];\n  const y = this.pos[1];\n\n  ctx.save(); // saves the coordinate system\n  ctx.translate(x, y); // now the position (0, 0) is found at (x, y)\n  ctx.rotate(this.rotation); // rotate around the start point of your line\n  ctx.beginPath();\n  ctx.moveTo(this.radius * 2, 0);\n  ctx.lineTo(0 - this.radius, this.radius);\n  ctx.bezierCurveTo(0, 0, 0, 0, 0 - this.radius, 0 - this.radius);\n  ctx.fill();\n  ctx.restore(); // restores the coordinate system back to (0, 0)\n};\n\nShip.prototype.burn = function () {\n  const force = Util.scalar(this.thrust, this.rotation);\n  this.applyForce(force);\n};\n\nShip.prototype.toggleReaction = function () {\n  this.reactionControl = !this.reactionControl;\n};\n\nmodule.exports = Ship;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/ship.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}